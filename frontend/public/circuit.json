{"noir_version":"1.0.0-beta.9+6abff2f16e1c1314ba30708d1cf032a536de3d19","hash":"17941448525751255454","abi":{"parameters":[{"name":"molecular_weight","type":{"kind":"integer","sign":"unsigned","width":32},"visibility":"private"},{"name":"h_bond_donors","type":{"kind":"integer","sign":"unsigned","width":32},"visibility":"private"},{"name":"h_bond_acceptors","type":{"kind":"integer","sign":"unsigned","width":32},"visibility":"private"},{"name":"rotatable_bonds","type":{"kind":"integer","sign":"unsigned","width":32},"visibility":"private"},{"name":"max_molecular_weight","type":{"kind":"integer","sign":"unsigned","width":32},"visibility":"public"},{"name":"max_h_donors","type":{"kind":"integer","sign":"unsigned","width":32},"visibility":"public"},{"name":"max_h_acceptors","type":{"kind":"integer","sign":"unsigned","width":32},"visibility":"public"},{"name":"max_rotatable_bonds","type":{"kind":"integer","sign":"unsigned","width":32},"visibility":"public"},{"name":"compliance_result","type":{"kind":"integer","sign":"unsigned","width":32},"visibility":"public"}],"return_type":null,"error_types":{}},"bytecode":"H4sIAAAAAAAA/9WZ21LCMBCGty3IoSIqIsJVH8CLpgdo73wVGeH9H0Ey7EpMIxf2DzPJDN2y7WT+PXyBtBGdx+b0eefz6PRJ2OqRWb7I4YsdvsThGzh8Q4fvzuEbOXxj9g1Ya0zdIb4PtmW+rarDrjioUn3mRbtv6ryq99tGNapu6q+iKctDUzW7dt/u8lZV5UEd67Y85udhzpX3G2rQfy6VG7rsgZrbzOuE7ZSsYkzo0iDim3KBzDEIpCD/1FWwLjUBxjgFFvOWsETA2gwpPFhStvf6YIKRUhcWfVNmiULD4qsgfWFJgTHeU5iwxMDa3FF4sMzYPuiDCcaMurDomzJLFBoWXwXpC8sMGOMDhQlLAqzNiMKDZc72UR9MMObUhUXflFmi0LD4KkhfWObAGB/BjRJhGuRnbv2XM3XM2zfuJ5xGL3HrBfHJQ9zPnuPuq0/39rOHfI6BcV/7UUDnA5CDM5+7r5st5Au2L5IQWbS1I7MEJB4T1nehXQB1vXgqJLrhFoSD7pagALaB3Mxl4ZDrBZQl21dJiICiHZklAA1KRDhQlkBdr54KiW64JYUJCmALeHNQVmzfJCECinZklgA0KDHhQFkBdb1RGKCsKExQANs/zu+2csj1Asqa7UYSIqBoR2YJQIOSEA6UNVDXxlMh0Q23Jhwo8m6SDCuaY6790Liuz/UDPf2cYkzdIbHKtV/vzOjSax8Y/YXMn/qZPx85Ypwa56l1LTZy9Vdu7O+xZa/da/tN38xxTeaUvZapV+L4BvYdI9IMHwAA","debug_symbols":"pZTbisMgEED/xec8OF5jfmVZik1tCYgJNikspf++YzTZ9mGh2KcTHedEx8udnNxxuRyGcB6vpPu6k2McvB8uBz/2dh7GgL33R0O25mGOzmEXeYpj1mSjCzPpwuJ9Q27WL+ug62TDytlGjNKGuHBCovA8eJe+Hs1fNv0/1UhZko2Re7p8Ox+ogCIAqmmNAUBtBpBQZTC7gXFRY+Ci3Qxcq08Nhn1oEFTXGITeDRKqDLLdDQqqVqGE2A2K1xg0ZZtBs6rd1Irvhvb1VH9jy/ZDfLmHxODIhgDNgAyWwUmH8wGRITNUhiYd/gnaDLOC0Qy0YCUYy+AZIgMteGIZWjQCLVh1hhaDMCs4zYCMNBdcMeeFolAWqnQLkLqwLTSZIq0MJyygkBUmX9rmm42DPXpXXqXzEvqnR2r+mbbI9oxNcezdaYkuFXKNYWl/AQ==","file_map":{"50":{"source":"// ZK_COMPLY - LogP Compliance Circuit (UltraPlonk)\n// Zero-knowledge proof for pharmaceutical compliance\n// Author: Marcos Antonio Morais Braga\n\nfn main(\n    // Private inputs (sensitive molecular data)\n    molecular_weight: u32,        // Molecular weight (private)\n    h_bond_donors: u32,          // H-bond donors (private)\n    h_bond_acceptors: u32,       // H-bond acceptors (private)\n    rotatable_bonds: u32,        // Rotatable bonds (private)\n    \n    // Public inputs (regulatory thresholds)\n    max_molecular_weight: pub u32,     // MW <= 500 (Lipinski)\n    max_h_donors: pub u32,             // HBD <= 5 (Lipinski)\n    max_h_acceptors: pub u32,          // HBA <= 10 (Lipinski)\n    max_rotatable_bonds: pub u32,      // RB <= 10 (Veber)\n    \n    // Public output (compliance result)\n    compliance_result: pub u32         // 1 = compliant, 0 = non-compliant\n) {\n    // Check individual compliance for each parameter\n    let mw_compliant = if molecular_weight <= max_molecular_weight { 1 } else { 0 };\n    let hbd_compliant = if h_bond_donors <= max_h_donors { 1 } else { 0 };\n    let hba_compliant = if h_bond_acceptors <= max_h_acceptors { 1 } else { 0 };\n    let rb_compliant = if rotatable_bonds <= max_rotatable_bonds { 1 } else { 0 };\n    \n    // Overall compliance = ALL parameters must be compliant\n    let overall_compliance = mw_compliant * hbd_compliant * hba_compliant * rb_compliant;\n    \n    // Verify that public result matches calculation\n    assert(compliance_result == overall_compliance);\n    \n    // Sanity validations (reasonable upper bounds)\n    assert(molecular_weight <= 2000);    // Max 2000 Da\n    assert(h_bond_donors <= 50);         // Max 50 donors\n    assert(h_bond_acceptors <= 50);      // Max 50 acceptors\n    assert(rotatable_bonds <= 100);      // Max 100 bonds\n}\n\n#[test]\nfn test_compliant_molecule() {\n    // Test with compliant molecule (Aspirin-like)\n    main(\n        180,    // MW = 180 Da (< 500) OK\n        1,      // HBD = 1 (< 5) OK\n        4,      // HBA = 4 (< 10) OK\n        3,      // RB = 3 (< 10) OK\n        500,    // max_mw\n        5,      // max_hbd\n        10,     // max_hba\n        10,     // max_rb\n        1       // compliance_result = 1 (compliant)\n    );\n}\n\n#[test]\nfn test_non_compliant_molecule() {\n    // Test with non-compliant molecule (MW too high)\n    main(\n        800,    // MW = 800 Da (> 500) FAIL\n        2,      // HBD = 2 (< 5) OK\n        6,      // HBA = 6 (< 10) OK\n        4,      // RB = 4 (< 10) OK\n        500,    // max_mw\n        5,      // max_hbd\n        10,     // max_hba\n        10,     // max_rb\n        0       // compliance_result = 0 (non-compliant)\n    );\n}\n\n#[test(should_fail)]\nfn test_invalid_compliance_result() {\n    // Test that should fail: inconsistent result\n    main(\n        180,    // MW = 180 Da (< 500) OK\n        1,      // HBD = 1 (< 5) OK\n        4,      // HBA = 4 (< 10) OK\n        3,      // RB = 3 (< 10) OK\n        500,    // max_mw\n        5,      // max_hbd\n        10,     // max_hba\n        10,     // max_rb\n        0       // compliance_result = 0 (WRONG - should be 1)\n    );\n}\n","path":"/home/user/Documents/ZK-COMPLY/zk_comply_prod/milestone4/zkproof18-1-backend/circuits-zk/noir/src/main.nr"}},"names":["main"],"brillig_names":["directive_integer_quotient"]}